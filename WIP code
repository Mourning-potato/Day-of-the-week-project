from breezypythongui import EasyFrame
from tkinter import PhotoImage
from tkinter.font import Font
# importing necessary modules

class DayOfTheWeekCalculator(EasyFrame):
    """a gui program that calculated the day of the week for any date after 0/00/0000, and displays a calendar showing
    that date and any dates around it"""
    def __init__(self):
# setting up the window
        EasyFrame.__init__(self, width=320, height=900)
        self.setResizable(False)
        self.setTitle("Day of the Week")
        # sets the title
        self.currentDayOfWeek = ""
        self.calendarOpen = True
        self.monthList = ["January","February","March","April","May","June",
                     "July","August","September","October","November","December"]
        self.dayList = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15",
                        "16","17", "18","19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31",
                        "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"]
        # list of days for the calendar to display

        self.dayLabel = self.addLabel(text="        |  SAT  | SUN |MON|  TUE | WED | THU |  FRI  |", row=11,column=0)
        self.calendarRow1 = self.addLabel(text="", row=12,column=0)
        self.calendarRow2 = self.addLabel(text="", row=13,column=0)
        self.calendarRow3 = self.addLabel(text="", row=14,column=0)
        self.calendarRow4 = self.addLabel(text="", row=15,column=0)
        self.calendarRow5 = self.addLabel(text="", row=16,column=0)
        self.calendarRow6 = self.addLabel(text="", row=17,column=0)
        # labels for the calendar display

        self.yearSelectPanel = self.addPanel(row=1,column=0, columnspan=5, rowspan= 2, background= "blue")
        self.yearSelectPanel.addLabel(text="Year:", row = 1, column= 3, sticky= "N")
        self.yearSelectPanel.subtract100Years = self.yearSelectPanel.addButton(text = "<<<", row=2, column=0,
                                                                               command=self.decrementYearByOneHundred)
        self.yearSelectPanel.subtract10Years = self.yearSelectPanel.addButton(text = "<<", row=2, column=1,
                                                                              command=self.decrementYearByTen)
        self.yearSelectPanel.subtract1Year = self.yearSelectPanel.addButton(text = "<", row=2, column=2,
                                                                            command= self.decrementYearByOne)
        self.yearSelectPanel.year = self.yearSelectPanel.addIntegerField(value=2000, row=2, column=3, sticky="",
                                                                         state="readonly")
        self.yearSelectPanel.add1Year = self.yearSelectPanel.addButton(text=">", row=2, column=4,
                                                                       command=self.incrementYearByOne)
        self.yearSelectPanel.add10Years = self.yearSelectPanel.addButton(text=">>", row=2,column=5,
                                                                         command=self.incrementYearByTen)
        self.yearSelectPanel.add100Years = self.yearSelectPanel.addButton(text=">>>", row=2,column=6,
                                                                         command=self.incrementYearByOneHundred)
        # setting up the panel to allow the user to change the selected year
        self.month = self.addScale(label="Month: January",row = 3,column=0,from_=1, to=12, columnspan=3,
                                   command=self.displayMonth)
        self.day = self.addScale(label = "Day", row=4, column=0, from_=1, to= 31, columnspan=3,
                                 command=self.dayChange)
        # setting up the day and month scales
        self.addLabel(text = "The day of the week is automatically calculated when \n the sliders are moved", row = 7, column = 0)
        self.hideCalendar = self.addButton(text="hide calendar", row=9, column=0, command=self.hideCalendar)
        self.dayOfWeekLabel = self.addLabel(text="Day of the week is: " + self.currentDayOfWeek, row=5, column=0)
        self.dayOfTheWeek()
        # setting up the other labels, and initializing the program

        self.setResizable(False)
        self.imageLabel = self.addLabel(text="", row=10, column=0, sticky="NSEW")
        # Load the image and associate it with the image label.
        self.notHere = PhotoImage(file="not-here.gif")
        self.calculate = PhotoImage(file="calculate.gif")
        self.imageLabel["image"] = self.calculate
        self.textLabel = self.addLabel(text = "calculating...", row = 11, column = 0, sticky = "NSEW")
        font = Font(family = "Verdana", size = 20, slant = "italic")
        self.textLabel["font"] = font
        self.textLabel["foreground"] = "red"
        # sets up the images

    def dayOfTheWeek(self):
        """This function calculates the day of the week by calculating the number of days that have passed since the
        beginning, adding extra days from leap years, and dividing the number by 7 before using the remainder to find
        the day of the week according to the list. It then changes the current display on the calendar label to show the
        currently selected date in < >, and changes the calendar if the month or year is changed"""
        isLeapYear = 0
        monthDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
        daysOfTheWeek = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
        # stuff the function needs

        year = self.yearSelectPanel.year.get()
        month = self.month.get()
        day = self.day.get()
        # getting the values for the date from the gui

        if int(year) % 4 == 0:
            if int(year) % 100 == 0:
                if int(year) % 400 == 0:
                    isLeapYear = 1
            else:
                isLeapYear = 1
        # checking if current year is a leap year

        if day > monthDays[month - 1]:
            if month == 2 and isLeapYear == 1:
                if day > 29:
                    self.dayOfWeekLabel["text"] = "invalid date"
                    return
            else:
                self.dayOfWeekLabel["text"] = "invalid date"
                return
        # makes sure the day of the month is valid, also taking leap years into account with feb 29

        leapYearSkips = int(year) // 100
        leapYearSkipSkips = int(year) // 400
        # checking how many leap year skips there have been

        leapYears = (int(year) // 4) - leapYearSkips + leapYearSkipSkips
        # calculating the total number of leap years

        daysFromYears = (int(year) * 365 + leapYears)
        # calculating how many days are added from the number of years

        daysFromMonth = 0
        monthCounted = int(month)
        while monthCounted > 1:
            daysFromMonth += monthDays[monthCounted - 2]
            monthCounted -= 1
        # this calculates how many days are added from the month. It adds up all the days from the months preceding
        # the input month

        if isLeapYear == 1 and int(month) > 2:
            daysFromMonth += 1
        if isLeapYear == 1:
            daysFromMonth -= 1
        # takes february 29th into account if it is a leap year, and a month past february

        daysSinceBeginning = daysFromYears + daysFromMonth + int(day)
        # adds up all the days since 0/00/0000

        dayOfWeek = daysSinceBeginning % 7
        # gets the remainder from dividing by seven


        self.currentDayOfWeek = (daysOfTheWeek[dayOfWeek - 1])
        # changes the current day of the week to the corresponding date according to the list

        weekDayString = "Day of the week is: " + self.currentDayOfWeek
        self.dayOfWeekLabel["text"] = weekDayString

        if self.calendarOpen:
            currentDay = 1
            daysBetween = (day + 6) % 7
            if daysBetween > dayOfWeek:
                daysBetween -= 7
            dayOfWeek -= daysBetween
            # the above makes sure the calendar stays on the first day of the month rather than moving the 1st to the
            # currently selected date, which was caused by a design oversight on my part, but this fix works well enough
            newRow = "        "
            while currentDay < dayOfWeek:
                newRow = newRow + "|   " + self.dayList[0] + "   "
                currentDay += 1
            # puts in any needed 0s in front of the 1st
            while currentDay < 8:
                if currentDay - dayOfWeek == day:
                    newRow = newRow + "| <" + self.dayList[currentDay - dayOfWeek] + ">"
                else:
                    newRow = newRow + "|   " + self.dayList[currentDay - dayOfWeek] + "   "
                currentDay += 1
            # adds in the rest of the first week
            newRow = newRow + "|"
            self.calendarRow1["text"] = newRow
            newRow = "        "
            while currentDay < 15:
                if currentDay - dayOfWeek == day:
                    newRow = newRow + "| <" + self.dayList[currentDay - dayOfWeek] + ">"
                else:
                    newRow = newRow + "|   " + self.dayList[currentDay - dayOfWeek] + "   "
                currentDay += 1
            newRow = newRow + "|"
            self.calendarRow2["text"] = newRow
            # adds in the second week
            newRow = "        "
            while currentDay < 22:
               # print(currentDay - dayOfWeek)
               if currentDay - dayOfWeek == day:
                   newRow = newRow + "| <" + self.dayList[currentDay - dayOfWeek] + ">"
                   currentDay += 1
               else:
                   newRow = newRow + "|   " + self.dayList[currentDay - dayOfWeek] + "   "
                   currentDay += 1
            # adds in the third weeks
            newRow = newRow + "|"
            self.calendarRow3["text"] = newRow
            newRow = "        "
            while currentDay < 29:
                if currentDay - dayOfWeek > monthDays[month - 1]:
                    newRow = newRow + "|   " + self.dayList[0] + "   "
                elif currentDay - dayOfWeek == day:
                    newRow = newRow + "| <" + self.dayList[currentDay - dayOfWeek] + ">"
                else:
                    newRow = newRow + "|   " + self.dayList[currentDay - dayOfWeek] + "   "
                currentDay += 1
            newRow = newRow + "|"
            self.calendarRow4["text"] = newRow
            # adds in the fourth week
            newRow = "        "
            while currentDay < 36:
                if currentDay - dayOfWeek - isLeapYear> monthDays[month - 1]:
                    newRow = newRow + "|   " + self.dayList[0] + "   "
                elif currentDay - dayOfWeek == day:
                    newRow = newRow + "| <" + self.dayList[currentDay - dayOfWeek] + ">"
                else:
                    newRow = newRow + "|   " + self.dayList[currentDay - dayOfWeek] + "   "
                currentDay += 1
            newRow = newRow + "|"
            self.calendarRow5["text"] = newRow
            # adds in the fifth week
            newRow = "        "
            while currentDay < 43:
                if currentDay - dayOfWeek > monthDays[month - 1]:
                    newRow = newRow + "|   " + self.dayList[0] + "   "
                elif currentDay - dayOfWeek == day:
                    newRow = newRow + "| <" + self.dayList[currentDay - dayOfWeek] + ">"
                else:
                    newRow = newRow + "|   " + self.dayList[currentDay - dayOfWeek] + "   "
                currentDay += 1
            newRow = newRow + "|"
            self.calendarRow6["text"] = newRow
            # adds in the sixth weeks

    def displayMonth(self, date):
        """changes the month display label to show the currently selected month, and reruns the dayOfTheWeek function"""
        monthList = self.monthList
        # gets the list of months
        newMonthLabel = "Month: " + monthList[int(date) - 1]
        self.month["label"] = newMonthLabel
        self.dayOfTheWeek()

    def incrementYearByOne(self):
        """increments the year by one"""
        year = self.yearSelectPanel.year.getNumber()
        year += 1
        self.yearSelectPanel.year.setValue(year)
        self.dayOfTheWeek()

    def incrementYearByTen(self):
        """increments the year by ten"""
        year = self.yearSelectPanel.year.getNumber()
        year += 10
        self.yearSelectPanel.year.setValue(year)
        self.dayOfTheWeek()

    def incrementYearByOneHundred(self):
        """increments the year by one hundred"""
        year = self.yearSelectPanel.year.getNumber()
        year += 100
        self.yearSelectPanel.year.setValue(year)
        self.dayOfTheWeek()

    def decrementYearByOne(self):
        """decrements the year by one"""
        year = self.yearSelectPanel.year.getNumber()
        year -= 1
        self.yearSelectPanel.year.setValue(year)
        self.dayOfTheWeek()

    def decrementYearByTen(self):
        """decrements the year by ten"""
        year = self.yearSelectPanel.year.getNumber()
        year -= 10
        self.yearSelectPanel.year.setValue(year)
        self.dayOfTheWeek()

    def decrementYearByOneHundred(self):
        """decrements the year by one hundred"""
        year = self.yearSelectPanel.year.getNumber()
        year -= 100
        self.yearSelectPanel.year.setValue(year)
        self.dayOfTheWeek()
    # the above functions are to increment or decrement the year value by 1, 10, or 100

    def dayChange(self, date):
        """runs the day of the week function when the day slider is moved"""
        self.dayOfTheWeek()
        # runs the dayOfTheWeek functions when the day slider is moved

    def hideCalendar(self):
        """hides or unhides the calendar display"""
        if self.calendarOpen:
            self.calendarOpen = False
            self.dayLabel["text"] = ""
            self.calendarRow1["text"] = ""
            self.calendarRow2["text"] = ""
            self.calendarRow3["text"] = ""
            self.calendarRow4["text"] = ""
            self.calendarRow5["text"] = ""
            self.calendarRow6["text"] = ""
            self.hideCalendar["text"] = "Open calendar"
            self.imageLabel["image"] = self.notHere
            self.textLabel["text"] = ""
            # if the calendar is open, it is hidden, and image is changed to "not here"
        else:
            self.calendarOpen = True
            self.dayLabel["text"] = "        |  SAT  | SUN |MON|  TUE | WED | THU |  FRI  |"
            self.dayOfTheWeek()
            self.hideCalendar["text"] = "Hide calendar"
            self.imageLabel["image"] = self.calculate
            self.textLabel["text"] = "calculating..."
            # if the calendar is hidden, it is opened, and the image is changed to "calculating"

def main():
    DayOfTheWeekCalculator().mainloop()

if __name__ == "__main__":
    main()
# things that keep the loop running
